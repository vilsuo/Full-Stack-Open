import { useState } from 'react'
import { createBlog } from '../reducers/blogsReducer'
import { useDispatch } from 'react-redux'
import { showNotification } from '../reducers/notificationReducer'

// author is not required in backend? (success message tries to
// show author)

const BlogForm = () => {
  const [title, setTitle] = useState('')
  const [author, setAuthor] = useState('')
  const [url, setUrl] = useState('')

  const dispatch = useDispatch()

  const handleSubmit = (event) => {
    event.preventDefault()

    const blogToAdd = { title, author, url }

    // The thunks generated by createAsyncThunk will always return a
    // resolved promise with either the fulfilled action object or
    // rejected action object inside, as appropriate.
    dispatch(createBlog(blogToAdd))
      // he promise returned by the dispatched thunk has an unwrap
      // property which can be called to extract the payload of a
      // fulfilled action or to throw either the error or, if available,
      // payload created by rejectWithValue from a rejected action
      .unwrap()
      .then((addedBlog) => {
        dispatch(showNotification(
          `blog ${addedBlog.title} by ${addedBlog.author} added`
        ))
        setTitle('')
        setAuthor('')
        setUrl('')
      })
      .catch((rejectedValueError) => {
        // handle error here
        dispatch(showNotification(rejectedValueError))
      })
  }

  return (
    <div id="create-blog-form">
      <h2>create new</h2>
      <form onSubmit={handleSubmit}>
        <label>
          <span>title:</span>
          <input
            id="create-blog-title-input"
            type="text"
            value={title}
            placeholder="give title"
            onChange={({ target }) => setTitle(target.value)}
          />
        </label>
        <br />
        <label>
          <span>author:</span>
          <input
            id="create-blog-author-input"
            type="text"
            value={author}
            placeholder="give author"
            onChange={({ target }) => setAuthor(target.value)}
          />
        </label>
        <br />
        <label>
          <span>url:</span>
          <input
            id="create-blog-url-input"
            type="text"
            value={url}
            placeholder="give url"
            onChange={({ target }) => setUrl(target.value)}
          />
        </label>
        <br />
        <button id="create-blog-button" type="submit">
          create
        </button>
      </form>
    </div>
  )
}

export default BlogForm
