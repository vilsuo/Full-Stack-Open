import { createBlog } from '../../reducers/blogsReducer'
import { useDispatch } from 'react-redux'
import { showSuccessNotification, showErrorNotification } from '../../reducers/notificationReducer'
import { useField } from '../../hooks'
import { addUserBlog } from '../../reducers/usersReducer'

const BlogForm = () => {
  const titleField = useField('text', 'create-blog-title-input', 'give title')
  const authorField = useField(
    'text',
    'create-blog-author-input',
    'give author',
  )
  const urlField = useField('text', 'create-blog-url-input', 'give url')

  const dispatch = useDispatch()

  const handleSubmit = (event) => {
    event.preventDefault()

    const blogToAdd = {
      title: titleField.inputProps.value,
      author: authorField.inputProps.value,
      url: urlField.inputProps.value,
    }

    // The thunks generated by createAsyncThunk will always return a
    // resolved promise with either the fulfilled action object or
    // rejected action object inside, as appropriate.
    dispatch(createBlog(blogToAdd))
      // he promise returned by the dispatched thunk has an unwrap
      // property which can be called to extract the payload of a
      // fulfilled action or to throw either the error or, if available,
      // payload created by rejectWithValue from a rejected action
      .unwrap()
      .then((addedBlog) => {
        dispatch(addUserBlog(addedBlog))

        dispatch(
          showSuccessNotification(
            `blog ${addedBlog.title} by ${addedBlog.author} added`,
          ),
        )
        titleField.reset()
        authorField.reset()
        urlField.reset()
      })
      .catch((rejectedValueError) => {
        dispatch(showErrorNotification(rejectedValueError))
      })
  }

  return (
    <div id="create-blog-form">
      <h2>create new</h2>
      <form onSubmit={handleSubmit}>
        <label>
          <span>title:</span>
          <input {...titleField.inputProps} />
        </label>
        <br />
        <label>
          <span>author:</span>
          <input {...authorField.inputProps} />
        </label>
        <br />
        <label>
          <span>url:</span>
          <input {...urlField.inputProps} />
        </label>
        <br />
        <button id="create-blog-button" type="submit">
          create
        </button>
      </form>
    </div>
  )
}

export default BlogForm
