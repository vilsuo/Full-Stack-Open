import { createBlog } from '../../reducers/blogsReducer'
import { useState } from 'react'
import { useDispatch } from 'react-redux'
import { showSuccessNotification, showErrorNotification } from '../../reducers/notificationReducer'
import { addUserBlog } from '../../reducers/usersReducer'
import { Form, Button, Row, Col } from 'react-bootstrap'

const BlogForm = () => {
  const [title, setTitle] = useState('')
  const [author, setAuthor] = useState('')
  const [url, setUrl] = useState('')

  const dispatch = useDispatch()

  const handleSubmit = (event) => {
    event.preventDefault()

    const blogToAdd = { title, author, url }

    // The thunks generated by createAsyncThunk will always return a
    // resolved promise with either the fulfilled action object or
    // rejected action object inside, as appropriate.
    dispatch(createBlog(blogToAdd))
      // he promise returned by the dispatched thunk has an unwrap
      // property which can be called to extract the payload of a
      // fulfilled action or to throw either the error or, if available,
      // payload created by rejectWithValue from a rejected action
      .unwrap()
      .then((addedBlog) => {
        dispatch(addUserBlog(addedBlog))

        dispatch(
          showSuccessNotification(
            `blog ${addedBlog.title} by ${addedBlog.author} added`,
          ),
        )

        setTitle('')
        setAuthor('')
        setUrl('')
      })
      .catch((rejectedValueError) => {
        dispatch(showErrorNotification(rejectedValueError))
      })
  }

  return (
    <Form
      id='create-blog-form'
      className='mb-2 p-2 border rounded'
      onSubmit={handleSubmit}
    >
      <Form.Group as={Row} controlId='formBlogTitle'>
        <Form.Label column sm={2}>
          title
        </Form.Label>
        <Col sm={10}>
          <Form.Control
            size='sm'
            type='text'
            value={title}
            onChange={(event) => setTitle(event.target.value)}
          />
        </Col>
      </Form.Group>

      <Form.Group as={Row} controlId='formBlogAuthor'>
        <Form.Label column sm={2}>
          author
        </Form.Label>
        <Col sm={10}>
          <Form.Control
            size='sm'
            type='text'
            value={author}
            onChange={(event) => setAuthor(event.target.value)}
          />
        </Col>
      </Form.Group>

      <Form.Group as={Row} controlId='formBlogUrl'>
        <Form.Label column sm={2}>
          url
        </Form.Label>
        <Col sm={10}>
          <Form.Control
            size='sm'
            type='text'
            value={url}
            onChange={(event) => setUrl(event.target.value)}
          />
        </Col>
      </Form.Group>

      <Form.Group as={Row}>
        <Col sm={{ span: 10, offset: 2 }}>
          <Button
            id='create-blog-button'
            size='sm'
            type='submit'
          >
            create
          </Button >
        </Col>
      </Form.Group>
    </Form>
  )
}

export default BlogForm
